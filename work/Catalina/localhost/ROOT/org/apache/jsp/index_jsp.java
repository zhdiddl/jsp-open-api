/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.100
 * Generated at: 2024-05-08 09:20:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import access.WifiAccess;
import param.WifiParam;
import call.APICall;
import call.DBCall;
import java.util.List;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/menu.jsp", Long.valueOf(1715071302595L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(5);
    _jspx_imports_classes.add("call.APICall");
    _jspx_imports_classes.add("call.DBCall");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("access.WifiAccess");
    _jspx_imports_classes.add("param.WifiParam");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>와이파이 정보 구하기</title>\r\n");
      out.write("    <style>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        /* 테이블 기본 스타일 */\r\n");
      out.write("        table {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            border-collapse: collapse;\r\n");
      out.write("            border: 1px solid grey;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /* 테이블 헤더 스타일 */\r\n");
      out.write("        th {\r\n");
      out.write("            background-color: #3CB371;\r\n");
      out.write("            color: white;\r\n");
      out.write("            border: 1px solid white;\r\n");
      out.write("            padding: 8px;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            font-size: 14px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /* 테이블 데이터 스타일 */\r\n");
      out.write("        td {\r\n");
      out.write("            color: black;\r\n");
      out.write("            border: 1px solid #ddd;\r\n");
      out.write("            padding: 8px;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            font-size: 14px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /* 테이블 데이터의 홀수 행 스타일 */\r\n");
      out.write("        tbody tr:nth-child(odd) {\r\n");
      out.write("            background-color: #ffffff;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /* 테이블 데이터의 짝수 행 스타일 */\r\n");
      out.write("        tbody tr:nth-child(even) {\r\n");
      out.write("            background-color: #f9f9f9;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /* 마우스 오버 시 행의 배경색 변경 */\r\n");
      out.write("        tbody tr:hover {\r\n");
      out.write("            background-color: #c8c8c8;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("    <h1>와이파이 정보 구하기</h1>\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("    <title>메뉴</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div>\r\n");
      out.write("    <!-- 홈 링크 -->\r\n");
      out.write("    <a href=\"index.jsp\">홈</a> |\r\n");
      out.write("\r\n");
      out.write("    <!-- 위치 히스토리 목록 링크 -->\r\n");
      out.write("    <a href=\"show-history.jsp\">위치 히스토리 목록</a> |\r\n");
      out.write("\r\n");
      out.write("    <!-- Open API 와이파이 정보 가져오기 링크 -->\r\n");
      out.write("    <a href=\"fetch-wifi-data.jsp\">Open API 와이파이 정보 가져오기</a>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("</body>");
      out.write("\r\n");
      out.write("    <br>\r\n");
      out.write("\r\n");
      out.write("<!-- 입력창 -->\r\n");
      out.write("\r\n");
      out.write("    <form method=\"post\" action=\"");
      out.print(request.getRequestURI());
      out.write("\">\r\n");
      out.write("        <label for=\"lat\">LAT:</label>\r\n");
      out.write("        <input type=\"text\" name=\"lat\" id=\"lat\" placeholder=\"Latitude 값 입력\" value=\"");
      out.print( request.getParameter("lat") != null ? request.getParameter("lat") : "0.0" );
      out.write("\">\r\n");
      out.write("\r\n");
      out.write("        <label for=\"lnt\">LNT:</label>\r\n");
      out.write("        <input type=\"text\" name=\"lnt\" id=\"lnt\" placeholder=\"Longitude 값 입력\" value=\"");
      out.print( request.getParameter("lnt") != null ? request.getParameter("lnt") : "0.0" );
      out.write("\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        <!-- 버튼 -->\r\n");
      out.write("        <button id=\"getLocationBtn\" type=\"button\">내 위치 가져오기</button>\r\n");
      out.write("        <button type=\"submit\">근처 Wifi 정보 보기</button>\r\n");
      out.write("\r\n");
      out.write("<br>\r\n");
      out.write("\r\n");
      out.write("<table>\r\n");
      out.write("    <thead>\r\n");
      out.write("    <tr>\r\n");
      out.write("        <th>거리(Km)</th>\r\n");
      out.write("        <th>관리번호</th>\r\n");
      out.write("        <th>자치구</th>\r\n");
      out.write("        <th>와이파이명</th>\r\n");
      out.write("        <th>도로명주소</th>\r\n");
      out.write("        <th>상세주소</th>\r\n");
      out.write("        <th>설치위치(층)</th>\r\n");
      out.write("        <th>설치유형</th>\r\n");
      out.write("        <th>설치기관</th>\r\n");
      out.write("        <th>서비스구분</th>\r\n");
      out.write("        <th>망종류</th>\r\n");
      out.write("        <th>설치년도</th>\r\n");
      out.write("        <th>실내외구분</th>\r\n");
      out.write("        <th>WIFI접속환경</th>\r\n");
      out.write("        <th>X좌표</th>\r\n");
      out.write("        <th>Y좌표</th>\r\n");
      out.write("        <th>작업일자</th>\r\n");
      out.write("    </tr>\r\n");
      out.write("    </thead>\r\n");
      out.write("    <tbody>\r\n");
      out.write("    ");

    String lat = request.getParameter("lat");
    String lnt = request.getParameter("lnt");
    boolean isInitialLoad = (lat == null || lat.isEmpty() || "0.0".equals(lat)) &&
    (lnt == null || lnt.isEmpty() || "0.0".equals(lnt));

    if (isInitialLoad) {
    out.println("<tr><td colspan='17' class='placeholder'>위치 정보를 입력한 후에 조회해 주세요.</td></tr>");
    } else {
    try {
    double dLat = Double.parseDouble(lat);
    double dLnt = Double.parseDouble(lnt);
    WifiAccess wifiAccess = new WifiAccess();
    List<WifiParam> list = wifiAccess.createWifiList(String.valueOf(dLnt), String.valueOf(dLat));

        if (list != null && !list.isEmpty()) {
        for (WifiParam wifiParam : list) {
        out.println("<tr>");
            out.println("<td>" + wifiParam.getDistance() + "</td>");
            out.println("<td>" + wifiParam.getXSwifiMgrNo() + "</td>");
            out.println("<td>" + wifiParam.getXSwifiWrdofc() + "</td>");
            out.println("<td>" + wifiParam.getXSwifiMainNm() + "</td>");
            out.println("<td>" + wifiParam.getXSwifiAdres1() + "</td>");
            out.println("<td>" + wifiParam.getXSwifiAdres2() + "</td>");
            out.println("<td>" + wifiParam.getXSwifiInstlFloor() + "</td>");
            out.println("<td>" + wifiParam.getXSwifiInstlTy() + "</td>");
            out.println("<td>" + wifiParam.getXSwifiInstlMby() + "</td>");
            out.println("<td>" + wifiParam.getXSwifiSvcSe() + "</td>");
            out.println("<td>" + wifiParam.getXSwifiCmcWr() + "</td>");
            out.println("<td>" + wifiParam.getXSwifiCnstcYear() + "</td>");
            out.println("<td>" + wifiParam.getXSwifiInoutDoor() + "</td>");
            out.println("<td>" + wifiParam.getXSwifiRemars3() + "</td>");
            out.println("<td>" + wifiParam.getLnt() + "</td>");
            out.println("<td>" + wifiParam.getLat() + "</td>");
            out.println("<td>" + wifiParam.getWorkDttm() + "</td>");
            out.println("</tr>");
        }
        } else {
        out.println("<tr><td colspan='17' class='placeholder'>데이터를 불러올 수 없습니다.</td></tr>");
        }
        } catch (NumberFormatException e) {
        out.println("<tr><td colspan='17' class='placeholder'>위도와 경도 값을 올바르게 입력하세요.</td></tr>");
        }
        }
        
      out.write("\r\n");
      out.write("\r\n");
      out.write("    </tbody>\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
      out.write("        <script>\r\n");
      out.write("            // \"내 위치 가져오기\" 버튼에 이벤트 리스너를 설정합니다.\r\n");
      out.write("            document.getElementById('getLocationBtn').addEventListener('click', function(event) {\r\n");
      out.write("                event.preventDefault();  // 기본 이벤트를 방지합니다.\r\n");
      out.write("\r\n");
      out.write("                // 위치 정보 기능을 지원하는 경우\r\n");
      out.write("                if (navigator.geolocation) {\r\n");
      out.write("                    navigator.geolocation.getCurrentPosition(function(position) {\r\n");
      out.write("                        // 성공적으로 위치를 받아왔을 때 입력 필드에 위치 정보를 설정합니다.\r\n");
      out.write("                        document.getElementById('lat').value = position.coords.latitude.toFixed(6);\r\n");
      out.write("                        document.getElementById('lnt').value = position.coords.longitude.toFixed(6);\r\n");
      out.write("                    }, function(error) {\r\n");
      out.write("                        // 위치 정보를 받아오는데 실패했을 때 오류 메시지를 표시합니다.\r\n");
      out.write("                        alert('위치 정보를 가져오는 데 실패했습니다: ' + error.message);\r\n");
      out.write("                    });\r\n");
      out.write("                } else {\r\n");
      out.write("                    // 브라우저가 위치 정보 기능을 지원하지 않는 경우\r\n");
      out.write("                    alert('브라우저가 위치 정보 기능을 지원하지 않습니다.');\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("        </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
